import { 
  GenerateImageRequest, 
  ProviderResult, 
  Env, 
  ProviderConfig,
  FalResponse,
  ImageGenerationError 
} from '@/types';
import { createTimeout, retry } from '@/utils/common';
import { validateImageDimensions } from '@/utils/validation';

// Fal API configuration
const FAL_API_BASE = 'https://fal.run';
const DEFAULT_MODEL = 'fal-ai/fast-sdxl';

/**
 * Generate image using Fal API
 */
export async function generateWithFal(
  request: GenerateImageRequest,
  env: Env,
  config: ProviderConfig
): Promise<ProviderResult> {
  if (!env.FAL_KEY) {
    throw new ImageGenerationError('Fal API key not configured', 'fal');
  }

  const { width, height } = validateImageDimensions(request.width, request.height);

  try {
    const result = await retry(
      () => generateSingleRequest(request, env, width, height, config),
      {
        maxRetries: config.retries,
        baseDelay: 1000,
        maxDelay: 5000,
        backoffFactor: 2,
      }
    );

    return {
      success: true,
      url: result.url,
      provider: 'fal',
      elapsedMs: 0, // Will be set by caller
    };
  } catch (error) {
    if (error instanceof ImageGenerationError) {
      throw error;
    }
    
    throw new ImageGenerationError(
      `Fal error: ${error instanceof Error ? error.message : 'Unknown error'}`,
      'fal',
      error instanceof Error ? error : undefined
    );
  }
}

/**
 * Make a single generation request to Fal using the subscribe pattern
 */
async function generateSingleRequest(
  request: GenerateImageRequest,
  env: Env,
  width: number,
  height: number,
  config: ProviderConfig
): Promise<{ url: string }> {
  let prompt = request.prompt;

  // Add style if provided
  if (request.style) {
    prompt = `${prompt}, ${request.style}`;
  }

  const payload = {
    prompt,
    image_size: `${width}x${height}`,
    num_inference_steps: 20,
    guidance_scale: 7.5,
    num_images: 1,
    enable_safety_checker: true,
    seed: Math.floor(Math.random() * 1000000),
  };

  console.log('Fal API request:', {
    url: `${FAL_API_BASE}/${DEFAULT_MODEL}`,
    payload,
    headers: {
      'Authorization': `Key ${env.FAL_KEY ? '[REDACTED]' : 'MISSING'}`,
      'Content-Type': 'application/json',
    }
  });

  // Use Fal's subscribe pattern for better reliability
  const response = await Promise.race([
    fetch(`${FAL_API_BASE}/${DEFAULT_MODEL}`, {
      method: 'POST',
      headers: {
        'Authorization': `Key ${env.FAL_KEY}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(payload),
    }),
    createTimeout(config.timeout, 'Fal request timed out'),
  ]);

  if (!response.ok) {
    const errorText = await response.text();
    let errorMessage = `HTTP ${response.status}`;

    try {
      const errorJson = JSON.parse(errorText);
      errorMessage = errorJson.detail || errorJson.message || errorJson.error || errorMessage;
      console.error('Fal API error details:', errorJson);
    } catch {
      errorMessage = errorText || errorMessage;
      console.error('Fal API error text:', errorText);
    }

    console.error(`Fal API failed with status ${response.status}: ${errorMessage}`);
    throw new Error(`Fal API error: ${errorMessage}`);
  }

  const result: FalResponse = await response.json();

  console.log('Fal API response:', JSON.stringify(result, null, 2));

  if (!result.images || result.images.length === 0) {
    console.error('Fal response missing images:', result);
    throw new Error('No images generated by Fal');
  }

  const imageUrl = result.images[0]?.url;
  if (!imageUrl) {
    console.error('Fal response missing image URL:', result.images[0]);
    throw new Error('Invalid image URL from Fal');
  }

  console.log('Fal generated image URL:', imageUrl);
  return { url: imageUrl };
}

/**
 * Get available Fal models
 */
export async function getFalModels(env: Env): Promise<string[]> {
  if (!env.FAL_KEY) {
    return [];
  }

  try {
    // Fal doesn't have a public models endpoint, return known models
    return [
      'fal-ai/fast-sdxl',
      'fal-ai/flux/schnell',
      'fal-ai/flux/dev',
      'fal-ai/stable-diffusion-v3-medium',
      'fal-ai/aura-flow',
    ];
  } catch (error) {
    console.error('Error fetching Fal models:', error);
    return [DEFAULT_MODEL];
  }
}

/**
 * Validate Fal API key
 */
export async function validateFalKey(apiKey: string): Promise<boolean> {
  try {
    // Test with a simple model call to validate the key
    const response = await fetch(`${FAL_API_BASE}/${DEFAULT_MODEL}`, {
      method: 'POST',
      headers: {
        'Authorization': `Key ${apiKey}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        prompt: 'test',
        image_size: '512x512',
        num_images: 1,
      }),
    });

    // A 401 means invalid key, other errors might be quota/rate limits
    return response.status !== 401;
  } catch {
    return false;
  }
}
